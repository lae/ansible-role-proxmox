---
# tasks file for ansible-role-proxmox
- name: Gather distribution specific variables
  include_vars: "debian-{{ ansible_distribution_release }}.yml"

- name: Ensure that we have an IP address for all cluster hosts
  assert:
    that:
      - "hostvars[item].ansible_default_ipv4.address is defined"
    msg: "Missing IP address and other information for {{ item }}. Have you gathered its facts?"
  with_items: "{{ groups[pve_group] }}"

- name: Ensure this host is in the group specified
  assert:
    that:
      - "inventory_hostname in groups[pve_group]"
    msg: "This host does not appear to be in the group {{ pve_group }}, \
          did you specify the pve_group host variable correctly?"
  when: pve_cluster_enabled|bool

- import_tasks: ssh_cluster_config.yml

- name: Run handlers if needed (sshd reload)
  meta: flush_handlers

- name: Enumerate all cluster hosts within the hosts file
  blockinfile:
    dest: /etc/hosts
    marker: "# {mark} ANSIBLE MANAGED: Proxmox Cluster Hosts"
    content: |
      {% for host in groups[pve_group] %}
      {{ hostvars[host].ansible_default_ipv4.address }} {{ hostvars[host].ansible_fqdn }} {{ hostvars[host].ansible_hostname }}{% if ansible_fqdn == hostvars[host].ansible_fqdn %} pvelocalhost{% endif %}

      {% endfor %}

- name: Remove conflicting lines in hosts files
  lineinfile:
    dest: /etc/hosts
    # expanded, this turns out to be, for example:
    # regexp: '^(?!10\.0\.3\.17 test01\.lxc test01( pvelocalhost)?)(?!10\.0\.3\.17)[\w:.]+(\s+.*)?\s(test01\.lxc|test01|pvelocalhost)(\s+.*|\s*)$'
    # basically first we ignore lines that match from the host enumeration task
    # above, then we match against different IPs (e.g. NOT 10.0.3.17) that have
    # the hostname/fqdn we inserted a record for previously, taking care also to
    # detect word boundaries (\b wasn't working for some reason)
    regexp: '^(?!{{ hostvars[item].ansible_default_ipv4.address | regex_escape() }} {{ hostvars[item].ansible_fqdn | regex_escape() }} {{ hostvars[item].ansible_hostname | regex_escape() }}( pvelocalhost)?)(?!{{ hostvars[item].ansible_default_ipv4.address | regex_escape() }})[\w:.]+(\s+.*)?\s({{ hostvars[item].ansible_fqdn | regex_escape() }}|{{ hostvars[item].ansible_hostname | regex_escape() }}{% if ansible_fqdn == hostvars[item].ansible_fqdn %}|pvelocalhost{% endif %})(\s+.*|\s*)$'
    state: absent
    backup: yes
  with_items: "{{ groups[pve_group] }}"

- name: Trust Proxmox' packaging key
  apt_key:
    data: "{{ lookup('file', pve_release_key) }}"
    id: "{{ pve_release_key_id }}"
    state: present

- name: Remove os-prober package
  apt:
    name: os-prober
    state: absent

- name: Add Proxmox repository
  apt_repository:
    repo: "{{ pve_repository_line }}"
    filename: proxmox
    state: present
  register: _pve_repo

- name: Run apt-get dist-upgrade on repository changes
  apt:
    update_cache: yes
    cache_valid_time: 3600
    upgrade: dist
  when: _pve_repo is changed
  retries: 2
  register: _dist_upgrade
  until: _dist_upgrade is succeeded

- name: Perform system upgrades
  apt:
    update_cache: yes
    cache_valid_time: 3600
    upgrade: yes
  when: pve_run_system_upgrades|bool
  retries: 2
  register: _system_upgrade
  until: _system_upgrade is succeeded

- import_tasks: identify_needed_packages.yml

- name: Install Proxmox VE and related packages
  apt:
    name: "{{ _pve_install_packages }}"
    state: "{{ 'latest' if pve_run_proxmox_upgrades else 'present' }}"
  retries: 2
  register: _proxmox_install
  until: _proxmox_install is succeeded

- block:
  - name: Remove automatically installed PVE Enterprise repo configuration
    apt_repository:
      repo: "{{ item }}"
      filename: pve-enterprise
      state: absent
    with_items:
      - "deb https://enterprise.proxmox.com/debian stretch pve-enterprise"
      - "deb https://enterprise.proxmox.com/debian/pve stretch pve-enterprise"

  - name: Remove subscription check wrapper function in web UI
    patch:
      src: "00_remove_checked_command.patch"
      basedir: /
      strip: 1
      backup: yes
    when:
      - pve_remove_subscription_warning|bool

  when:
    - "'pve-no-subscription' in pve_repository_line"

- import_tasks: kernel_updates.yml

- import_tasks: ipmi_watchdog.yml
  when: pve_watchdog == 'ipmi'

- import_tasks: zfs.yml
  when: pve_zfs_enabled|bool

- import_tasks: kernel_module_cleanup.yml

- import_tasks: pve_cluster_config.yml
  when: pve_cluster_enabled|bool

- name: Configure Proxmox groups
  proxmox_group:
    name: "{{ item.name }}"
    comment: "{{ item.comment | default(omit) }}"
  with_items: "{{ pve_groups }}"
  when: "not pve_cluster_enabled or (pve_cluster_enabled and inventory_hostname == groups[pve_group][0])"

- name: Configure Proxmox user accounts
  proxmox_user:
    name: "{{ item.name }}"
    email: "{{ item.email | default(omit) }}"
    firstname: "{{ item.firstname | default(omit) }}"
    lastname: "{{ item.lastname | default(omit) }}"
    groups: "{{ item.groups | default([]) }}"
  with_items: "{{ pve_users }}"
  when: "not pve_cluster_enabled|bool or (pve_cluster_enabled and inventory_hostname == groups[pve_group][0])"

- name: Configure Proxmox ACLs
  proxmox_acl:
    path: "{{ item.path }}"
    roles: "{{ item.roles }}"
    groups: "{{ item.groups | default([]) }}"
    users: "{{ item.users | default([]) }}"
  with_items: "{{ pve_acls }}"
  when: "not pve_cluster_enabled|bool or (pve_cluster_enabled and inventory_hostname == groups[pve_group][0])"

- name: Configure Proxmox Storage
  proxmox_storage:
    name: "{{ item.name }}"
    type: "{{ item.type }}"
    disable: "{{ item.disable | default(False) }}"
    path: "{{ item.path | default(omit) }}"
    content: "{{ item.content | default([]) }}"
    nodes: "{{ item.nodes | default(omit) }}"
    username: "{{ item.username | default(omit) }}"
    pool: "{{ item.pool | default(omit) }}"
    monhost: "{{ item.monhost | default(omit) }}"
    maxfiles: "{{ item.maxfiles | default(omit) }}"
    krbd: "{{ item.krbd | default(omit) }}"
    state: "{{ item.state | default('present') }}"
    server: "{{ item.server | default(omit) }}"
    export: "{{ item.export | default(omit) }}"
    options: "{{ item.options | default(omit) }}"
    vgname: "{{ item.vgname | default(omit) }}"
    thinpool: "{{ item.thinpool | default(omit) }}"
  with_items: "{{ pve_storages }}"
  when: "not pve_cluster_enabled|bool or (pve_cluster_enabled and inventory_hostname == groups[pve_group][0])"

- import_tasks: ssl_config.yml
  when:
    - pve_ssl_private_key is defined
    - pve_ssl_certificate is defined

- import_tasks: ssl_letsencrypt.yml
  when: pve_ssl_letsencrypt|bool
