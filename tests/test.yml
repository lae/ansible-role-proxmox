---
- name: Test the Proxmox VE installation
  hosts: all
  tasks:
    - name: Ensure Proxmox Web UI returns a successful HTTP response
      ansible.builtin.uri:
        url: "https://{{ inventory_hostname }}:8006"

    - name: Query PVE cluster status
      ansible.builtin.command: "pvesh get /cluster/status --output=json"
      register: _pve_cluster
      changed_when: false

    - name: Check that this node is within the cluster and it is in quorum
      ansible.builtin.assert:
        that: "(_pve_cluster.stdout | from_json | json_query(query)) == 1"
      vars:
        query: "([?type=='cluster'].quorate)[0]"

    - name: Query PVE realms
      ansible.builtin.command: "pvesh get /access/domains --output=json"
      register: _pve_realms
      changed_when: false

    - name: Construct realm list
      ansible.builtin.set_fact:
        realm_list: "{{ realm_list | default([]) }} + [ '{{ item.type }}' ]"
      with_items: "{{ pve_domains_cfg }}"

    - name: Check that PVE realms exist # noqa run-once[task]
      ansible.builtin.assert:
        that: "realm_list is subset(_pve_realms.stdout | from_json | json_query(query))"
      vars:
        query: "[*].type"
      run_once: true

    - name: Check PVE realms configuration
      ansible.builtin.assert:
        that:
          - item.type == realm.type
          - item.name == realm.realm
          - item.attributes.comment == realm.comment
      vars:
        realm: '{{ _pve_realms.stdout | from_json
                   | json_query("[?realm==''" + item.name + "'']") | first }}'
      with_items: "{{ pve_domains_cfg }}"

    - name: Query PVE groups
      ansible.builtin.command: "pvesh get /access/groups --output=json"
      register: _pve_groups
      changed_when: false

    - name: Check that PVE groups exist # noqa run-once[task]
      ansible.builtin.assert:
        that: "(_pve_groups.stdout | from_json | json_query(query)) == 1"
      vars:
        query: "length([?groupid=='{{ item.name }}'])"
      run_once: true
      with_items: "{{ pve_groups }}"

    - name: Query PVE users
      ansible.builtin.command: "pvesh get /access/users --output=json"
      register: _pve_users
      changed_when: false

    - name: Check that PVE users exist # noqa run-once[task]
      ansible.builtin.assert:
        that: "(_pve_users.stdout | from_json | json_query(query)) == 1"
      vars:
        query: "length([?userid=='{{ item.name }}'])"
      run_once: true
      with_items: "{{ pve_users }}"

    - name: Query PVE ACLs
      ansible.builtin.command: "pvesh get /access/acl --output=json"
      register: _pve_acl
      changed_when: false

    - name: Check that PVE ACLs exist # noqa run-once[task]
      ansible.builtin.assert:
        that: "(_pve_acl.stdout | from_json | json_query(query)) == 3"
      vars:
        query: "length([])"
      run_once: true

    - name: Query PVE storages
      ansible.builtin.command: "pvesh get /storage --output=json"
      register: _pve_storage
      changed_when: false

    - name: Construct storage list
      ansible.builtin.set_fact:
        sto_list: "{{ sto_list | default([]) }} + [ '{{ item.name }}' ]"
      with_items: "{{ pve_storages }}"

    - name: Check that PVE storages exist # noqa run-once[task]
      ansible.builtin.assert:
        that: "sto_list is subset(_pve_storage.stdout | from_json | json_query(query))"
      vars:
        query: "[*].storage"
      run_once: true

    - name: Check that User specified ZFS Volumes exist
      community.general.zfs_facts:
        dataset: "{{ item }}"
      with_items: "{{ pve_zfs_create_volumes }}"

    - name: Read datacenter.cfg file
      ansible.builtin.slurp:
        src: "/etc/pve/datacenter.cfg"
      register: datacenter_cfg

    - name: Check datacenter.cfg content
      ansible.builtin.assert:
        that: "'console: xtermjs' in datacenter_cfg.content | b64decode"

    - name: Query PVE HA groups # noqa run-once[task]
      ansible.builtin.command: "pvesh get /cluster/ha/groups --output=json"
      register: _ha_group_list
      run_once: true
      changed_when: false

    - name: Check PVE HA group configuration
      ansible.builtin.assert:
        that:
          - item.name == ha_group.group
          - item.comment == ha_group.comment
          - item.nodes == ha_group.nodes
          - item.restricted == ha_group.restricted
          - "'nofailback' not in ha_group"
      vars:
        ha_group: '{{ _ha_group_list.stdout | from_json
                      | json_query("[?group==''" + item.name + "'']") | first }}'
      with_items: "{{ pve_cluster_ha_groups }}"

    - name: Get status # noqa ignore-errors
      ignore_errors: true
      block:
        - name: Service pvedaemon status
          ansible.builtin.command: "journalctl --no-pager -xu pvedaemon.service"
          changed_when: false
        - name: Service pve-cluster status
          ansible.builtin.command: "journalctl --no-pager -xu pve-cluster.service"
          changed_when: false
        - name: Service pveproxy status
          ansible.builtin.command: "journalctl --no-pager -xu pveproxy.service"
          changed_when: false
        - name: Hosts file
          ansible.builtin.command: "cat /etc/hosts"
          changed_when: false
